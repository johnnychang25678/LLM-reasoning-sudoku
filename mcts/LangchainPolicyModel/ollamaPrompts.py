gen_actions_prompt = \
"""
Given the following Sudoku state:
{state}
where * represents a cell to be filled in.

Suggest the next possible states to solve this Sudoku by filling in exactly one * cell with a valid number. 
You must strictly follow the Sudoku rule:
- Each row must contain the numbers 1 through 3 exactly once.
- Each column must contain the numbers 1 through 3 exactly once.
- You are not allowed to modify any cell that already contains a number (i.e., non-* cells).

**Schema Requirements:**
- Your response must be valid JSON.
- The JSON object must contain two keys: "thought" and "states".
- The "thought" key must contain a detailed, step-by-step explanation of the following:
  1. Identify the exact locations of all empty cells (e.g., "Empty cells are at (1, 2) and (2, 3)").
  2. For each empty cell, explain the reasoning for determining valid numbers based on Sudoku rules.
     - Specify why certain numbers are valid or invalid for the cell.
  3. Describe how each new state is generated by filling one empty cell with a valid number.
  4. Ensure that all generated states strictly follow Sudoku rules. Highlight why a specific action would be invalid if applicable.
- The "states" key must contain a list of possible next states.
    - Each item in the list must be an object with a single key "rows".
    - The value of "rows" must be a 2D list of strings, where each string is either:
        - A number between "1" and "3" (inclusive).
        - The string "*", representing an empty cell.
    - Each suggested state must differ from the original state by exactly one cell.

**Positive Example**:
If the input state is:
[
    ["1", "*", "*"],
    ["*", "2", "*"],
    ["*", "*", "3"]
]
A valid response could be:
{{
    "thought": "The Sudoku grid has empty cells at (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), and (3, 2). For cell (1, 2), numbers 2 and 3 are valid because 1 is already present in row 1. For cell (1, 3), only 2 is valid because 1 and 3 are already present in row 1. For cell (2, 1), numbers 1 and 3 are valid because 2 is already present in row 2. I generated the first state by filling (1, 2) with 2. I generated the second state by filling (1, 2) with 3.",
    "states": [
        {{
            "rows": [
                ["1", "*", "2"],
                ["*", "2", "*"],
                ["*", "*", "3"]
            ]
        }},
        {{
            "rows": [
                ["1", "3", "*"],
                ["*", "2", "*"],
                ["*", "*", "3"]
            ]
        }}
    ]
}}

**Negative Example**:
If the input state is:
[
    ["1", "*", "3"],
    ["*", "2", "*"],
    ["*", "*", "*"]
]
An invalid response could be:
{{
    "thought": "The Sudoku grid has empty cells at (1, 2), (2, 1), (2, 3), (3, 1), (3, 2), and (3, 3). For cell (1, 2), the valid numbers are 2 and 3. I incorrectly generated a state by filling (1, 2) with 1, which violates the rule that each row must contain unique numbers.",
    "states": [
        {{
            "rows": [
                ["1", "1", "3"],
                ["*", "2", "*"],
                ["*", "*", "*"]
            ]
        }}
    ]
}}
In this case, the action of filling (1, 2) with 1 is invalid because 1 already exists in row 1, violating the uniqueness rule. Ensure no states in your response break the Sudoku rules.

Respond only with valid JSON following the schema. Do not write an introduction, summary, or explanations. Think step by step.
"""

is_terminal_and_give_reward_prompt = \
"""
Given the following Sudoku state:
{state}
where * represents a cell to be filled in.

**Tasks:**
1. Determine if the Sudoku state is a terminal state. A terminal state has:
    - No empty cells (i.e., no * present in the grid).
2. If the state is not terminal:
    - Provide a reason explaining why it is not terminal (e.g., "Cell at (row, column) is empty.").
    - Assign a reward of 0.
3. If the state is terminal:
    - Check if the Sudoku is solved correctly. A Sudoku is solved correctly if:
        - Each row contains the numbers 1 through 3 exactly once.
        - Each column contains the numbers 1 through 3 exactly once.
    - Assign a reward of +1 if the Sudoku is solved correctly and -1 if it is not.
    - Provide a reason, even if terminal, explaining correctness or violation of the rules.

**Schema Requirements:**
- Your response must be valid JSON.
- The JSON object must contain three keys: "terminal", "reward", and "reason".
- The value of "terminal" must be a boolean:
    - `true` if the state is terminal (no empty cells).
    - `false` if the state is not terminal (contains empty cells).
- The value of "reward" must be an integer:
    - `1` if the state is terminal and correctly solved.
    - `-1` if the state is terminal but not solved correctly.
    - `0` if the state is not terminal.
- The value of "reason" must be a string explaining why the Sudoku is or is not terminal and, if terminal, why it is correct or incorrect.

**Examples:**
- Terminal and Correct Sudoku: 
    [['1', '2', '3'], ['3', '1', '2'], ['2', '3', '1']] -> 
    {{
        "terminal": true,
        "reward": 1,
        "reason": "The Sudoku is solved correctly with no empty cells and no rule violations."
    }}
- Terminal and Incorrect Sudoku: 
    [['1', '2', '3'], ['3', '1', '2'], ['2', '3', '2']] -> 
    {{
        "terminal": true,
        "reward": -1,
        "reason": "The Sudoku is incorrect because the number 2 is repeated in the last column."
    }}
- Non-terminal Sudoku: 
    [['1', '*', '3'], ['3', '1', '2'], ['2', '3', '1']] -> 
    {{
        "terminal": false,
        "reward": 0,
        "reason": "Cell at (1, 2) is empty."
    }}

Respond only with valid JSON following the schema. Example response:
{{
    "terminal": false,
    "reward": 0,
    "reason": "Cell at (1, 2) is empty."
}}

Do not write an introduction, summary, or explanation.
"""
